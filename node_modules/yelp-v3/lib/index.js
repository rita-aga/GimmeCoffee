'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _querystring = require('querystring');

var _querystring2 = _interopRequireDefault(_querystring);

var _requestify = require('requestify');

var _requestify2 = _interopRequireDefault(_requestify);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var baseUrl = 'https://api.yelp.com/v3/';

var Yelp = function () {
  function Yelp(opts) {
    _classCallCheck(this, Yelp);

    this.access_token = opts.access_token;
  }

  _createClass(Yelp, [{
    key: 'get',
    value: function get(resource) {
      var _this = this;

      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var cb = arguments[2];

      var promise = new Promise(function (resolve, reject) {
        _requestify2.default.get(baseUrl + resource + '?' + _querystring2.default.stringify(params), {
          headers: {
            'Authorization': 'Bearer ' + _this.access_token
          }
        }).then(function (response) {
          resolve(JSON.parse(response.body));
        }).fail(function (response) {
          reject(response);
        });
      });
      if (typeof cb === 'function') {
        promise.then(function (res) {
          return cb(null, res);
        }).catch(cb);
        return null;
      }
      return promise;
    }

    /**
     * https://github.com/Yelp/yelp-api-v3/blob/master/docs/api-references/businesses-search.md
     * Example:
     * yelp.search({term: 'food', location: 'Montreal', function(error, data) {});
     */

  }, {
    key: 'search',
    value: function search(params, callback) {
      return this.get('businesses/search', params, callback);
    }

    /**
     * https://github.com/Yelp/yelp-api-v3/blob/master/docs/api-references/businesses-id.md
     * Example:
     * yelp.businesses('yelp-san-francisco', function(error, data) {});
     * businesses may contain utf-8 characters, such as an accented character. using querystring.escape on the businessid
     */

  }, {
    key: 'businesses',
    value: function businesses(id, callback) {
      return this.get('businesses/' + _querystring2.default.escape(id), undefined, callback);
    }

    /**
     * https://github.com/Yelp/yelp-api-v3/blob/master/docs/api-references/businesses-id-reviews.md
     * Example:
     * yelp.businessesReviews('yelp-san-francisco', function(error, data) {});
     */

  }, {
    key: 'businessesReviews',
    value: function businessesReviews(id, callback) {
      return this.get('businesses/' + _querystring2.default.escape(id) + '/reviews', undefined, callback);
    }

    /**
     * https://github.com/Yelp/yelp-api-v3/blob/master/docs/api-references/autocomplete.md
     * Example:
     * yelp.autocomplete(text: 'Mc', latitude: 40.730610, longitude: -73.935242, }, function(error, data) {});
     */

  }, {
    key: 'autocomplete',
    value: function autocomplete(params, callback) {
      return this.get('autocomplete', params, callback);
    }
    /**
     *https://github.com/Yelp/yelp-api-v3/blob/master/docs/api-references/businesses-search-phone.md
     * Example:
     * yelp.phoneSearch({phone: "+12223334444"}, function(error, data) {});
     */

  }, {
    key: 'phoneSearch',
    value: function phoneSearch(params, callback) {
      return this.get('businesses/search/phone', params, callback);
    }
  }]);

  return Yelp;
}();

exports.default = Yelp;